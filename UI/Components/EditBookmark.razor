@using UI.Pages
@implements IAsyncDisposable

<div class="edit">
    <h2>Edit Bookmark</h2>
    <strong>Summary</strong>
    <p>
        @Bookmark.Content
    </p>
    <hr />
    <strong>Personal notes</strong>
    @if(Details is not null && Details.Notes is not null)
    {
        @foreach (var note in Details.Notes)
        {
            <EditNote Note=note SaveChanges=SaveChanges Delete="async () => DeleteNote(note.Id)"/>
        }

        @if (Details.Notes.FirstOrDefault()?.Id is not null) 
        {
            <button @onclick="() => CreateNote()">Add new note</button>
        }
    }
    <small>@SaveText</small>
</div>

@code {
    [Parameter] public SearchItem Bookmark { get; set; }

    [Inject] ILogger<EditBookmark> Logger { get; set; }
    [Inject] HttpClient Http { get; set; }

    bool Saved { get; set; } = true;
    bool Loaded { get; set; } = false;

    BookmarkDetailsDTO? Details { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(!Loaded || Details is null) 
        {
            await LoadDetails();
            Loaded = true;
        }
        await base.OnParametersSetAsync();
    }

    public async Task LoadDetails() 
    {
        Logger.LogInformation("Loading bookmark details");
        Details = new();
        Details.Content = Bookmark.Content ?? "";
        Details.Url = Bookmark.Url;
        Details.Id = Bookmark.Id;
        Details = await Http.GetFromJsonAsync<BookmarkDetailsDTO>($"api/Bookmark/{Details.Id}");
        Details.Notes = Details.Notes.Count() == 0 ? new List<NoteDTO>() { new() } : Details.Notes;
    }

    public async ValueTask DisposeAsync()
    {
        await SaveChanges();
    }

    public async ValueTask DeleteNote(int? id)
    {
        Details.Notes = Details.Notes.Where(n => n.Id != id).ToList();
        await SaveChanges();
    }

    public async ValueTask CreateNote()
    {
        Details.Notes.Add(new());
    }

    async ValueTask SaveChanges()
    {
        Saved = true;
        var result = await Http.PutAsJsonAsync($"api/Bookmark/{Details.Id}", Details);
        return;
    }

    string SaveText => Saved ? "Up to date." : "Changes will be saved automatically";
}